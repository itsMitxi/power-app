package com.example.powerbff.exercise;

import com.example.powerbff.entity.Exercise;
import com.example.powerbff.repository.ExerciseRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
public class ExerciseRepositoryTests {

    @Autowired
    private ExerciseRepository exerciseRepository;

    @Test
    public void shouldSaveAndDeleteExercise() {
        Exercise exercise = new Exercise();
        exercise.setName("testexercise");
        exercise.setDescription("testdescription");
        exercise.setImgUrl("testimgurl");

        exerciseRepository.save(exercise);
        Optional<Exercise> foundExercise = exerciseRepository.findByName("testexercise");
        assertThat(foundExercise).isPresent();

        exerciseRepository.deleteById(foundExercise.get().getId());
        foundExercise = exerciseRepository.findByName("testexercise");
        assertThat(foundExercise).isNotPresent();
    }

    @Test
    public void shouldCreateTwoExercisesWithDifferentIds() {
        Exercise exercise = new Exercise();
        exercise.setName("oneExercise");
        exerciseRepository.save(exercise);

        exercise = new Exercise();
        exercise.setName("anotherExercise");
        exerciseRepository.save(exercise);

        Optional<Exercise> oneExercise = exerciseRepository.findByName("oneExercise");
        assertThat(oneExercise).isPresent();

        Optional<Exercise> anotherExercise = exerciseRepository.findByName("anotherExercise");
        assertThat(anotherExercise).isPresent();

        assertThat(oneExercise.get().getId()).isNotEqualTo(anotherExercise.get().getId());

        exerciseRepository.deleteById(oneExercise.get().getId());
        exerciseRepository.deleteById(anotherExercise.get().getId());
    }

    @Test
    public void shouldNotCreateTwoExercisesWithSameName() {
        Exercise exercise = new Exercise();
        exercise.setName("sameName");
        Exercise exercise1 = exerciseRepository.save(exercise);

        exercise = new Exercise();
        exercise.setName("sameName");
        Exercise exercise2 = new Exercise();
        try {
            exercise2 = exerciseRepository.save(exercise);
        } catch (Exception ignored) {}

        Optional<Exercise> exerciseFound = exerciseRepository.findById(exercise1.getId());
        assertThat(exerciseFound).isPresent();

        exerciseFound = exerciseRepository.findById(exercise2.getId());
        assertThat(exerciseFound).isNotPresent();

        exerciseRepository.deleteById(exercise1.getId());
    }

    @Test
    public void shouldNotCreateExerciseWithNonAutoGeneratedId() {
        Exercise exercise = new Exercise();
        exercise.setId(999L);
        exercise.setName("exercise");
        exerciseRepository.save(exercise);

        assertThat(exerciseRepository.findById(999L)).isNotPresent();
        Optional<Exercise> foundExercise = exerciseRepository.findByName("exercise");
        assertThat(foundExercise).isPresent();

        exerciseRepository.deleteById(foundExercise.get().getId());
    }

    @Test
    public void shouldCreateNewAndNotUpdateExerciseWhenUpdatingId() {
        Exercise exercise = new Exercise();
        exercise.setName("name1");
        exerciseRepository.save(exercise);

        Optional<Exercise> foundExercise = exerciseRepository.findByName("name1");
        assertThat(foundExercise).isPresent();

        exercise = foundExercise.get();
        exercise.setId(999);
        exercise.setName("name2");
        try {
            exerciseRepository.save(exercise);
        } catch (Exception ignored) {}

        foundExercise = exerciseRepository.findById(999L);
        assertThat(foundExercise).isNotPresent();

        Optional<Exercise> exercise1 = exerciseRepository.findByName("name1");
        assertThat(exercise1).isPresent();

        Optional<Exercise> exercise2 = exerciseRepository.findByName("name2");
        assertThat(exercise2).isPresent();

        exerciseRepository.deleteById(exercise1.get().getId());
        exerciseRepository.deleteById(exercise2.get().getId());
    }

    @Test
    public void shouldUpdateOtherFieldsThanId() {
        Exercise exercise = new Exercise();
        exercise.setName("name1");
        exercise.setDescription("description1");
        exercise.setImgUrl("imgurl1");
        exerciseRepository.save(exercise);

        Optional<Exercise> foundExercise = exerciseRepository.findByName("name1");
        assertThat(foundExercise).isPresent();
        assertThat(foundExercise.get().getName()).isEqualTo("name1");
        assertThat(foundExercise.get().getDescription()).isEqualTo("description1");
        assertThat(foundExercise.get().getImgUrl()).isEqualTo("imgurl1");

        exercise = foundExercise.get();
        exercise.setName("name2");
        exercise.setDescription("description2");
        exercise.setImgUrl("imgurl2");
        exerciseRepository.save(exercise);

        foundExercise = exerciseRepository.findByName("name2");
        assertThat(foundExercise).isPresent();
        assertThat(foundExercise.get().getName()).isEqualTo("name2");
        assertThat(foundExercise.get().getDescription()).isEqualTo("description2");
        assertThat(foundExercise.get().getImgUrl()).isEqualTo("imgurl2");

        exerciseRepository.deleteById(foundExercise.get().getId());
    }

}
