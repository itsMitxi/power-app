package com.example.powerbff.exercise;

import com.example.powerbff.constants.ApiEndpoints;
import com.example.powerbff.entity.Exercise;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.List;
import java.util.Objects;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
public class ExerciseControllerTests {

    private final TestRestTemplate restTemplate = new TestRestTemplate();
    private String baseUrl;

    @BeforeEach
    public void setUp() {
        baseUrl = UriComponentsBuilder.fromHttpUrl(ApiEndpoints.BASE_URL)
                .path(ApiEndpoints.EXERCISES_BASE)
                .toUriString();
    }

    @Test
    public void shouldCreateAndDelteExercise() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise");
        restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        long id = Objects.requireNonNull(response.getBody()).getId();
        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + id, Exercise.class);

        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    public void shouldCreateExerciseWithAutoGeneratedId() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise");
        exercise.setId(999L);
        restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        long id = Objects.requireNonNull(response.getBody()).getId();
        assertThat(id).isNotEqualTo(999L);

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + id, Exercise.class);
    }

    @Test
    public void shouldGetAllExercises() {
        Exercise exercise1 = new Exercise();
        exercise1.setName("exercise1");
        Exercise exercise2 = new Exercise();
        exercise2.setName("exercise2");
        Exercise exercise3 = new Exercise();
        exercise3.setName("exercise3");
        restTemplate.postForEntity(baseUrl, exercise1, Exercise.class);
        restTemplate.postForEntity(baseUrl, exercise2, Exercise.class);
        restTemplate.postForEntity(baseUrl, exercise3, Exercise.class);

        ParameterizedTypeReference<List<Exercise>> responseType = new ParameterizedTypeReference<>() {};
        ResponseEntity<List<Exercise>> response = restTemplate.exchange(baseUrl, HttpMethod.GET, null, responseType);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        List<Exercise> exercises = response.getBody();
        assertThat(exercises).isNotEmpty();
        assertThat(exercises.size()).isEqualTo(3);

        exercises.forEach(exercise -> restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + exercise.getId(), Exercise.class));
    }

    @Test
    public void shouldGetExerciseById() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise");
        ResponseEntity<Exercise> response = restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        long id = Objects.requireNonNull(response.getBody()).getId();
        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_ID + id, Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        String name = Objects.requireNonNull(response.getBody()).getName();
        assertThat(name).isEqualTo(exercise.getName());

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + id, Exercise.class);
    }

    @Test
    public void shouldGetExerciseByName() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise-to-found");
        restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        long id = Objects.requireNonNull(response.getBody()).getId();
        String name = Objects.requireNonNull(response.getBody()).getName();
        assertThat(name).isEqualTo(exercise.getName());

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + id, Exercise.class);
    }

    @Test
    public void shouldUpdateExercise() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise");
        restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();

        Exercise updatedExercise = response.getBody();
        updatedExercise.setName("updated-exercise");
        updatedExercise.setDescription("updated-description");
        updatedExercise.setImgUrl("updated-imgurl");
        restTemplate.put(baseUrl + ApiEndpoints.EXERCISE_BY_ID + updatedExercise.getId(), updatedExercise);

        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + updatedExercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getImgUrl()).isEqualTo("updated-imgurl");

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + updatedExercise.getId(), Exercise.class);
    }

    @Test
    public void shouldNotUpdateExerciseIfNameDuplicated() {
        Exercise exercise1 = new Exercise();
        exercise1.setName("same-name");
        Exercise exercise2 = new Exercise();
        exercise2.setName("exercise");
        restTemplate.postForEntity(baseUrl, exercise1, Exercise.class);
        restTemplate.postForEntity(baseUrl, exercise2, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise1.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        long exercise1Id = Objects.requireNonNull(response.getBody()).getId();
        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise2.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();

        Exercise updatedExercise = response.getBody();
        updatedExercise.setName("same-name");
        response = restTemplate.exchange(baseUrl + ApiEndpoints.EXERCISE_BY_ID + updatedExercise.getId(), HttpMethod.PUT, new HttpEntity<>(updatedExercise), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + exercise1Id, Exercise.class);
        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + updatedExercise.getId(), Exercise.class);
    }

    @Test
    public void shouldNotUpdateId() {
        Exercise exercise = new Exercise();
        exercise.setName("exercise");
        restTemplate.postForEntity(baseUrl, exercise, Exercise.class);

        ResponseEntity<Exercise> response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_NAME + exercise.getName(), Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        long exerciseId = Objects.requireNonNull(response.getBody()).getId();
        long updatedExerciseId = exerciseId + 1;

        exercise = response.getBody();
        exercise.setId(updatedExerciseId);
        restTemplate.put(baseUrl + ApiEndpoints.EXERCISE_BY_ID + exerciseId, exercise);

        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_ID + updatedExerciseId, Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);

        response = restTemplate.getForEntity(baseUrl + ApiEndpoints.EXERCISE_BY_ID + exerciseId, Exercise.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

        restTemplate.delete(baseUrl + ApiEndpoints.EXERCISE_BY_ID + exerciseId, Exercise.class);
    }

}
